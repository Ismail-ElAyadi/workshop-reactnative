-----------------------------------------------------------------------------------------------------------------------------------------------
								Partie slide :

Introduction à React Native

- Quelques notions du développement mobile en général :

Application native vs cross-platform
**Faire un petit jeu avantages et inconvénients (en trouver 3 par groupe) et puis mise en commun et je rebondis avec la place de React native dans tout ça

Appli native = application spécialement développée pour un système d'exploitation (ex : Android), cela signifie que si l'on veut
viser un plus large public et que notre appli soit compatible pour Android et IOS, on va devoir travailler deux applis différentes avec
deux langages de programmation différents également. Pour iOS, ce sera soit "Objective-C" ou "Swift" et pour Android, "Java" ou "Kotlin".

Avantages applis natives : Fluide et performante car s'intègre mieux à l'OS. Exécution de l'appli plus rapide car langage plus proche de la machine. Meilleure communication avec
les autres composants natifs.

Inconvénients applis natives : plus de temps (si le dev est seul il devra bosser sur deux applis différentes), plus de ressources (plus de dev car deux langages diff à bosser mais donc pas de perte de temps). Attention tâches pouvant être communes : mockup, structure de l'app, ... (ne dépend pas du langage de prog en lui-même).
Perte d'une part de marché (car pas ok pour autre OS), on touche moins de monde.

Application mobile cross-platform : appli développée une seule fois, fonctionne à la fois sur Android et iOS et développée généralement
avec langages simples (ex : Javascript). Exemples : Ionic (basé sur Angular), Xamarin (.net), ...

Avantages cross-platform : un seul code à développer et à maintenir, moins de ressources nécessaires.

Inconvénients cross-platform : vitesse d'exécution moins bonne car langage doit d'abord être interprété par une couche intermédiaire avant d'être compris par l'OS.
Expérience utilisateur : comme on développe une appli commune pour Android et iOS, voulant plaire aux deux, y a un risque que l'appli ne plaise à personne. Contrairement aux applis natives,
on ne prend pas en compte les différences propres aux OS comme la navbar sur iOS (position du bouton retour, police, généralement idem). Cela permet de garder une certaine harmonie entre les applis mobiles sur un OS et donc l'utilisateur a plus facile de s'y retrouver.

- Qu'est-ce que React native et comment se démarque-t-il par rapport aux autres?

C'est un framework développé par Facebook en 2015 sauf qu'il utilise les composants natifs de l'OS, c'est-à-dire :
quand on veut afficher un élément graphique sur l'OS de destination, RN va le convertir en son équivalent natif (propre à l'OS). Une cross platform classique ne fait pas ça. RN joue au rôle de pont entre le code js et les composants natifs.
RN génère du code Java pour Android et du Swift pour iOS, tandis qu'un cross-platform classique (Ionic par ex), génère une webview qui permet d'insérer du html/css dans une appli native.
Schéma : https://www.digitz.fr/blog/wp-content/uploads/2017/02/dev-mobile-reactjs-maroc-digitz-agence-digitale-1024x612.png

Exemples :

Une vue -> convertie en UIView sur iOS / convertie en Android.view sur Android (=composant mobile natif).

Avantages de RN : fluidité, performance (lié à l'utilisation des composants natifs), React, fast refresh (quand on sauvegarde en développant une appli, les changements se font automatiquement sur le mobile, pas besoin de rebuild de l'appli)

Inconvénients de RN : utilise React et donc du JS, le JS ne garantit pas contre les erreurs de programmation. Langage beaucoup moins strict que le Java par exemple.

Il a plusieurs concurrents notamment Flutter qui est développé par Google et plus récent (première version stable fin 2018), mais basé sur le langage Dart créé par Google également.
Pas de comparaison...

Sources et liens intéressants : https://www.youtube.com/watch?v=UVFY3gNDjj8&list=PLxhnp_qsD8ENC508sia6nnY99tGj-YxWB&index=3
			        https://openclassrooms.com/fr/courses/4902061-developpez-une-application-mobile-react-native
			        https://www.dzmob.com/blog/2018/08/08/quest-react-native/
			        https://www.digitz.fr/blog/developpement-mobile-hybride-ionic-vs-react-native/
			        https://www.grafikart.fr/tutoriels/react-native-introduction-893
					https://www.youtube.com/watch?v=xb8uTN3qiUI
					https://www.digitz.fr/blog/wp-content/uploads/2017/02/dev-mobile-reactjs-maroc-digitz-agence-digitale-1024x612.png

---------------------------------------------------------------------------------------------------------------------------------------------

								Partie Readme

- Les installations : React native

Vérifier si npm est bien installé : npm -v, si c'est pas le cas : npm install npm@latest -g

Pour installer react native (par l'intermédiaire d'expo)  : npm install -g expo-cli 
+ installer l'appli "expo" sur mobile

Créer un dossier du nom de votre choix sur le bureau et puis aller dans ce dossier avec le terminal

Générer un nouveau projet react native : expo init my-app (my-app étant le nom de l'appli que j'ai choisi, vous pouvez mettre autre chose)

Choisir l'option "blank"

Une fois l'installation terminée, se diriger vers le nouveau dossier créé : cd my-app et faire : npm start (pour lancer le serveur de développement)

Ouvrir le dossier my-app dans votre éditeur de code (dans mon cas VS code)

- Les choses à savoir sur React native avant de débuter
Pas de CSS classique car pas une page web, le css est sous forme d'objets

- React native par la pratique, présentation du projet (appli mobile météo?)
